Tracks Microservice:

/tracks/insert
GET - all tracks, takes no parameters
POST - insert track into database
POST.data: {"title":"The Song Remains The Same","album":"Houses Of The Holy","artist":"Led Zeppelin","duration":"3:40","url":"http://10.0.2.15:9000/tracks/01%20The%20Song%20Remains%20The%20Same.mp3"}

/get/track/<string:url>
GET - track by url


/api/resources/tracks
GET - query parameters id or title or album or artist
- may return 0 or many tracks

/tracks/update
GET - returns all tracks, used for development reference
POST - UPDATE duration of a track
POST.data: {"changeValueTo":"59:99", "artist": "Led Zeppelin","title":"The Song Remains The Same"}

/tracks/delete
- deletes track given artist and title


Playlist Microservice:

/playlist/select/<int:id>
GET - select all playlist of given user id

/playlist/all
GET - select every playlist

/playlist/delete/<int:id>
GET - get playlist with sepcified id
DELETE - delte playlist with specified id

/playlist/create
GET  - select playlist given id
POST - create an empty playlist
Parameters - [userid, title, descrtiption]

/playlist/track/add
GET -  select and display one playlist
POST - insert track into playlist_tracks
Parameters - trackName, artist, playlistName, userid
- foreign key constraints in place
{"trackName":"Yellow Submarine","artist":"The Beatles","playlistName":"first playlist","userid":"1"}


Users Microservice:

/api/resources/users/all
GET - all users, takes no parameters

/api/resources/users/<int:id>
GET - user by id

/api/resources/users
GET - query parameters id or username
- may return 0 or many users
POST - query creates user

/api/resources/users/update
GET - query lists all users
PUT - query updates user password


Descriptions Microservice:

/api/resources/descriptions
GET  - query lists all descriptions
POST - query inserts a username, description, url
