XMLGEN:
/getxml
GET - creates new xml file with plalyist data in xml format

Tracks Microservice:

/tracks/insert
GET - all tracks, takes no parameters
POST - insert track into database
POST.data: {"title":"The Song Remains The Same","album":"Houses Of The Holy","artist":"Led Zeppelin","duration":"3:40","url":"http://10.0.2.15:9000/tracks/01%20The%20Song%20Remains%20The%20Same.mp3"}

/get/track/<string:url>
GET - track by url


/api/resources/tracks
GET - query parameters id or title or album or artist
- may return 0 or many tracks

/tracks/update
GET - returns all tracks, used for development reference
POST - UPDATE duration of a track
POST.data: {"changeValueTo":"59:99", "artist": "Led Zeppelin","title":"The Song Remains The Same"}

/tracks/delete
- deletes track given artist and title


Playlist Microservice:

http://127.0.0.1:5000/playlist/select/user?email=e@gmail.com&playlistname=tunes
/playlist/select
GET - select all playlist of given user id

/playlist/all
GET - select every playlist


/playlist/delete/
GET - get playlist with sepcified id
DELETE - delte playlist with specified id
	- requires curl command prompt with email and playlistname

/playlist/create
- create empty playlist with user info and playlist info
GET  - select playlist given id
POST - create an empty playlist
Parameters - [username, firstname, lastname,email]

/playlist/track/add
GET -  select and display one playlist
POST - insert track into playlist_tracks
Parameters - trackName, artist, playlistName, userid
- foreign key constraints in place
{"trackName":"Yellow Submarine","artist":"The Beatles","playlistName":"first playlist","userid":"1"}

/playlist/select/tracks
- used for XSPF service
- delivers only tracklist
parametrs: [playlistname,email]

Users Microservice:

/api/resources/users/all
GET - all users, takes no parameters

/users/create
POST - creates user, parameters[username,firstname,lastname,email,password]
refer to curl command in the populate_curl folder

/users/select?email= 
GET - query lists all users
PUT - query updates user password

/users/authenticate
POST - {email: , password: }

/users/update
-Updates password, also authenticates first
PUT - {"changeValueTo":"asd","email" : "e@gmail.com", "password":"pass"}

Descriptions Microservice:

/user/descriptions/add
POST - query inserts a username, description, urle
example: {"email": "e@gmail.com","artist":"Led Zeppelin","title":"The Song Remains The Same","description":"this song rocks"}

/users/get/description?email=
GET -  gets all descriptions associated with a user